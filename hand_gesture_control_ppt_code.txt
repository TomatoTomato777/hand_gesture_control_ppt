'''
YouTube reference - https://www.youtube.com/watch?v=CKmAZss-T5Y 
'''
'''
function:
code_1.txt - display slides & show camera in slide
code_2.txt - with hand detection
code_3.txt - add a line in middle (no function)
code_4.txt - if can detect gesture above the green line, then we accept the gesture
code_5.txt - hand gseture control changing slide
code_6.txt - hand gseture control give red dot laser in ppt slide
hand_gesture_control_ppt.txt - final code, able to control to next slide, use pointer, draw on slide 
'''

'''
previous slide = thumb open, remaining close
next slide = pinky open, remaining close
pointer = index & middle finger open, remaining close
draw = index open, remaining close

'''
'''
install:

sudo apt update && sudo apt upgrade -y
sudo apt install python3-pip -y

pip3 install opencv-python
pip3 install numpy
pip3 install mediapipe
pip3 install cvzone
'''

import cv2
import os
from cvzone.HandTrackingModule import HandDetector
import numpy as np

# Parameters
width, height = 1280, 720
gestureThreshold = 300
folderPath = "Presentation"

# Camera Setup
cap = cv2.VideoCapture(0)  # Use 0 for default camera
cap.set(3, width)
cap.set(4, height)

# Get list of presentation images (filter only .png, remove duplicates like .png.png, sort numerically)
pathImages = [
    f for f in os.listdir(folderPath)
    if f.lower().endswith(".png") and f.count(".png") == 1
]
pathImages = sorted(pathImages, key=lambda x: int(os.path.splitext(x)[0]))
print("Slides found:", pathImages)

# Variables
imgNumber = 0
hs, ws = int(120), int(213)  # size of webcam window inside slide
buttonPressed = False
buttonCounter = 0
buttonDelay = 30
annotations = [[]]
annotationNumber = -1
annotationStart = False

# Hand Detector
detector = HandDetector(detectionCon=0.8, maxHands=1)

while True:
    # Import images
    success, img = cap.read()
    if not success:
        print("Failed to grab frame from camera")
        continue

    img = cv2.flip(img, 1)
    pathFullImage = os.path.join(folderPath, pathImages[imgNumber])
    imgCurrent = cv2.imread(pathFullImage)

    # Find the hand and its landmarks
    hands, img = detector.findHands(img)  # with draw
    # Draw gesture threshold line
    cv2.line(img, (0, gestureThreshold), (width, gestureThreshold), (0, 255, 0), 10)

    if hands and buttonPressed is False:
        hand = hands[0]
        fingers = detector.fingersUp(hand)
        cx, cy = hand['center']
        lmList = hand['lmList']

        # Constrain values for easier drawing
        h, w, _ = imgCurrent.shape
        xVal = int(np.interp(lmList[8][0], [0, width], [0, w]))
        yVal = int(np.interp(lmList[8][1], [0, height], [0, h]))
        indexFinger = xVal, yVal

        if cy <= gestureThreshold:  # if hand is at the height of the face
            annotationStart = False
            # Gesture 1 - Previous Slide (Thumb up)
            if fingers == [1, 0, 0, 0, 0]:
                annotationStart = False
                print("Previous Slide")
                if imgNumber > 0:
                    buttonPressed = True
                    annotations = [[]]
                    annotationNumber = -1
                    imgNumber -= 1

            # Gesture 2 - Next Slide (Pinky up)
            if fingers == [0, 0, 0, 0, 1]:
                annotationStart = False
                print("Next Slide")
                if imgNumber < len(pathImages) - 1:
                    buttonPressed = True
                    annotations = [[]]
                    annotationNumber = -1
                    imgNumber += 1

        # Gesture 3 - Show Pointer (Index + Middle)
        if fingers == [0, 1, 1, 0, 0]:
            cv2.circle(imgCurrent, indexFinger, 12, (0, 0, 255), cv2.FILLED)

        # Gesture 4 - Draw Pointer (Only Index)
        if fingers == [0, 1, 0, 0, 0]:
            if annotationStart is False:
                annotationStart = True
                annotationNumber += 1
                annotations.append([])
            cv2.circle(imgCurrent, indexFinger, 12, (0, 0, 255), cv2.FILLED)
            annotations[annotationNumber].append(indexFinger)
        else:
            annotationStart = False

        # Gesture 5 - Erase (Index + Middle + Ring)
        if fingers == [0, 1, 1, 1, 0]:
            if annotations:
                if annotationNumber >= 0:
                    annotations.pop(-1)
                    annotationNumber -= 1
                    buttonPressed = True

    else:
        annotationStart = False

    # Button Pressed iterations
    if buttonPressed:
        buttonCounter += 1
        if buttonCounter > buttonDelay:
            buttonCounter = 0
            buttonPressed = False

    # Draw annotations
    for i in range(len(annotations)):
        for j in range(len(annotations[i])):
            if j != 0:
                cv2.line(imgCurrent, annotations[i][j - 1], annotations[i][j], (0, 0, 200), 12)

    # Adding webcam image on the slides
    imgSmall = cv2.resize(img, (ws, hs))
    h, w, _ = imgCurrent.shape
    imgCurrent[0:hs, w - ws:w] = imgSmall

    cv2.imshow("Webcam", img)
    cv2.imshow("Slides", imgCurrent)

    key = cv2.waitKey(1)
    if key == ord('q'):
        break
